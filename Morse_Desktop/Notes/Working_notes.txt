Working notes on the program: Desktop_Morse

#########################################################################################################################################################################################################

Versions notes:

 * V 1.0 :
 - Keep the same program (Morse_V1-6-10_Test) as a base for developing.
 
 - ON and OFF printed to study the effect of time.sleep() method on durations vs Morse code and their display for testing
    -> '.'  = 0.25"
    
    -> '-'  = 0.50" (same as two '.')
    
    -> ' '  = 0.25" (gap between two impulses for a letter -> same as one '.')
    
    -> between two letters  = 0.75" (gap between two letters of the same word -> same as three '.')
    
    -> between two words = 1.50" (space between two words -> same as seven '.')
    
 - new 'code()' function which can code a letter or a word or a sentence. Only one function for the Morse coding
 - space, punctuations and signs added to the 'morse_code' dictionary. The space ' ' is same as 7 '.' --> 1.50" time sleep
 
 - More simple code which use only one morse code function even the user enter a letter, a word or a sentence.
 
 
 * V 2.0 :
 - The 'pygame' library is used to play the Morse Code sounds
 
 
 * V 2.01 :
 - Print '.' and '-' of the Morse Code and the character associated
 
 
 * V 2.02 :
 - Suppression of the unused menus and associated functions. Obsolete ones since the 'code' function is able to code anything.
 - Morse coding sentence is written on a single with official Morse Code's separators.
 
 * V 2.03 :
 - Timer to show how many times is coding's duration
 
 * V 2.03-win :
 - Windows 11 version: the Linux version is modified here to be executed on Windows
 - The Morse sounds path is modified to be reached from the D: volume. BE CAREFUL! The path should be used with a "/" instead of a "\" --> ex: "D:/Python/Morse/Needed/Morse_point.wav"

 * V 3.0-win :
 - Begining of the 'learning mode' development
 - Random word choice for the learning mode (english or french) function included
 - The .txt files used for the random word choice are in the 'Needed' folder in the 'Morse' folder - They need to be in the same folder as the program or the path should be modified in the program


#############################################################################################################################################################################################################################

To do list and future enhancements

To do list: '-' = to be done    '/' = in development    'X' = finished

 [X] Coding and decoding words  --> in dev with the 'def code(ltr):' function
 [X] Coding and decoding sentences --> in dev with the 'def code(ltr):' function
 [X] Write the coded sentence in Morse signs
 [X] Showing the time for coding and decoding 
 [/] Morse code learning mode.
 [/] Random word for the practice in the learning mode.
 [-] Keyboard/Mouse impulses coding/decoding (GUI dev)
 [-] Write the impulsed code in real characters on the same line
 [x] Play a sound when coding in Morse
 [-] Play a sound when key/mouse is pressed to input something to decode or in learning mode (GUI dev)
 [-] Decode a real radio reception by SDR
 [-] User's GUI
 [-] Pack all the program and the needed elements in a single executable file
 
##############################################################################################################################################################################################################################

Developer notes:

* Code to retrieve the elements of the list associated with the letter:

 # Value of a letter/number given by the user
 print('* Morse coding of a letter/number given by the user \n')
 letter = input('letter/number ?..')
 if letter in morse_code:
     code_list = morse_code.get(letter)
     print (letter,'-->',code_list)
     for code in code_list:
         print (code, end="  ")
    
 else:
    print ('Invalid Input')

------------------------------------------------

* Create a function (def) for the test y/n it will be easier for the final choices of each coding/decoding module. 
 --> ok it works with the starting menu in function...

------------------------------------------------

* Comment the new functions and the different code elements made
 --> done

------------------------------------------------

* Create the function to code a word. Pay attention to the intervals between each letter.
 --> done

------------------------------------------------

* Consider using the gpiozero library instead of rpi.gpio for compatibility with Raspberry 5 --> conversion of the program with this library...
 --> See the versions of the program planned to work with the electronic setup.

------------------------------------------------

* --> Set up a 'Vxx-yy-win' file that can be used and modified on the Windows PC instead of the Linux PC.

------------------------------------------------

* To develop the Morse code learning mode:
  --> Search for a solution with an online dictionary to extract a random word (search with ChatGPT and GitHub Copilot)
  --> The solution would be to use an API that provides this word 
  --> The Test_API.py file located in the 'Utils' folder serves as a basis for this random word generation.
  --> The program should use the randomly provided word so that the user can practice Morse code with it.

  // Abandon the use of an API to find a random word. 
  --> Set up a .txt file containing a list of words from which the program will randomly select a word.
      This will allow me to familiarize myself with opening, reading, and closing an external file to the program, which will always be useful later.

  --> Files created in French and English ''processed_french_1000_words.txt'' and 'processed_english_1000_words.txt'
      Lists of 600 words randomly generated by ChatGPT.

  --> The scripts 'Test_Random_Word_txt_fr.py' and 'Test_Random_Word_txt_eng.py' work for randomly selecting a word from the .txt files.

------------------------------------------------